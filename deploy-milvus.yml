---
- name: Create milvus-etcd, minio, pulsar #Milvus基本的依赖组件，部署在同一台Host上便于控制IP地址
  hosts: dependencies
  become: yes
  become_user: root
  tags: docker
  roles:
    - deploy-etcd
  tasks:
  - name: "pulsar"
    docker_container:
      name: pulsar
      image: apachepulsar/pulsar:2.8.2
      env:
        # bin/apply-config-from-env.py script will modify the configuration file based on the environment variables
        # nettyMaxFrameSizeBytes must be calculated from maxMessageSize + 10240 (padding)
        nettyMaxFrameSizeBytes: "104867840" # this is 104857600 + 10240 (padding)
        defaultRetentionTimeInMinutes: "10080"
        defaultRetentionSizeInMB: "8192"
        # maxMessageSize is missing from standalone.conf, must use PULSAR_PREFIX_ to get it configured
        PULSAR_PREFIX_maxMessageSize: "104857600"
        PULSAR_GC: -XX:+UseG1GC
      command: "bin/pulsar standalone --no-functions-worker --no-stream-storage" #/bin/bash -c bin/apply-config-from-env.py conf/standalone.conf &&
      network_mode: "{{dependencies_network}}" #使用Host网络，Host定义在Inventory的变量中。如果使用Bridge网络则需要Publish相关的端口

  - name: "minio"
    docker_container:
      name: minio
      image: minio/minio:RELEASE.2022-03-17T06-34-49Z
      env:
        MINIO_ACCESS_KEY: minioadmin
        MINIO_SECRET_KEY: minioadmin
      command: "minio server /minio_data"
      healthcheck:
        test: ["CMD", "curl", "-f", "http://127.0.0.1:9000/minio/health/live"]
        interval: 30s
        timeout: 20s
        retries: 3
      network_mode: "{{dependencies_network}}" #使用Host网络，Host定义在Inventory的变量中。如果使用Bridge网络则需要Publish相关的端口

- name: Create milvus nodes #将Milvus的3个node角色部署到同一个Host，可以搭配读写优化的磁盘
  hosts: nodes
  become: yes
  become_user: root
  tags: docker
  tasks:
  - name: querynode
    docker_container:
      name: querynode
      image: milvusdb/milvus:v2.0.1
      command: "milvus run querynode"
      env:
        ETCD_ENDPOINTS: "{{ETCD_ENDPOINTS}}"
        MINIO_ADDRESS: "{{MINIO_ADDRESS}}"
        PULSAR_ADDRESS: "{{PULSAR_ADDRESS}}"
        METRICS_PORT: "9091"
      network_mode: "{{nodes_network}}" #使用Host网络，Host定义在Inventory的变量中。如果使用Bridge网络则需要Publish相关的端口

  - name: datanode
    docker_container: 
      name: datanode
      image: milvusdb/milvus:v2.0.1
      command: "milvus run datanode"
      env:
        ETCD_ENDPOINTS: "{{ETCD_ENDPOINTS}}"
        MINIO_ADDRESS: "{{MINIO_ADDRESS}}"
        PULSAR_ADDRESS: "{{PULSAR_ADDRESS}}"
        METRICS_PORT: "9092"
      network_mode: "{{nodes_network}}" #使用Host网络，Host定义在Inventory的变量中。如果使用Bridge网络则需要Publish相关的端口

  - name: indexnode
    docker_container: 
      name: indexnode
      image: milvusdb/milvus:v2.0.1
      command: "milvus run indexnode"
      env:
        ETCD_ENDPOINTS: "{{ETCD_ENDPOINTS}}"
        MINIO_ADDRESS: "{{MINIO_ADDRESS}}"
        PULSAR_ADDRESS: "{{PULSAR_ADDRESS}}"
        INDEX_COORD_ADDRESS: "{{INDEX_COORD_ADDRESS}}"
        METRICS_PORT: "9093"
      network_mode: "{{nodes_network}}" #使用Host网络，Host定义在Inventory的变量中。如果使用Bridge网络则需要Publish相关的端口

- name: Create milvus coords #将4个Milvus的Coordinator，和一个Proxy部署在同一个Host，可以做相应的优化配置，如果有其它方面的考虑，可以将Proxy分离出来
  hosts: coords
  become: yes
  become_user: root
  tags: docker
  tasks:
  - name: rootcoord
    docker_container: 
      name: rootcoord
      image: milvusdb/milvus:v2.0.1
      command: ["milvus", "run", "rootcoord"]
      env:
        ETCD_ENDPOINTS: "{{ETCD_ENDPOINTS}}"
        MINIO_ADDRESS: "{{MINIO_ADDRESS}}"
        PULSAR_ADDRESS: "{{PULSAR_ADDRESS}}"
        QUERY_COORD_ADDRESS: "{{QUERY_COORD_ADDRESS}}"
        METRICS_PORT: "9094"
      network_mode: "{{nodes_network}}" #使用Host网络，Host定义在Inventory的变量中。如果使用Bridge网络则需要Publish相关的端口

  - name: datacoord
    docker_container: 
      name: datacoord
      image: milvusdb/milvus:v2.0.1
      command: ["milvus", "run", "datacoord"]
      env:
        ETCD_ENDPOINTS: "{{ETCD_ENDPOINTS}}"
        MINIO_ADDRESS: "{{MINIO_ADDRESS}}"
        PULSAR_ADDRESS: "{{PULSAR_ADDRESS}}"
        DATA_COORD_ADDRESS: "{{DATA_COORD_ADDRESS}}"
        METRICS_PORT: "9095"
      network_mode: "{{nodes_network}}" #使用Host网络，Host定义在Inventory的变量中。如果使用Bridge网络则需要Publish相关的端口

  - name: querycoord
    docker_container:
      name: querycoord
      image: milvusdb/milvus:v2.0.1
      command: "milvus run querycoord"
      env:
        ETCD_ENDPOINTS: "{{ETCD_ENDPOINTS}}"
        MINIO_ADDRESS: "{{MINIO_ADDRESS}}"
        PULSAR_ADDRESS: "{{PULSAR_ADDRESS}}"
        QUERY_COORD_ADDRESS: "{{QUERY_COORD_ADDRESS}}"
        METRICS_PORT: "9096"
      network_mode: "{{nodes_network}}" #使用Host网络，Host定义在Inventory的变量中。如果使用Bridge网络则需要Publish相关的端口
  
  - name: indexcoord
    docker_container: 
      name: indexcoord
      image: milvusdb/milvus:v2.0.1
      command: ["milvus", "run", "indexcoord"]
      env:
        ETCD_ENDPOINTS: "{{ETCD_ENDPOINTS}}"
        MINIO_ADDRESS: "{{MINIO_ADDRESS}}"
        PULSAR_ADDRESS: "{{PULSAR_ADDRESS}}"
        INDEX_COORD_ADDRESS: "{{INDEX_COORD_ADDRESS}}"
        METRICS_PORT: "9097"
      network_mode: "{{nodes_network}}" #使用Host网络，Host定义在Inventory的变量中。如果使用Bridge网络则需要Publish相关的端口

  - name: "proxy"
    docker_container: 
      name: proxy
      image: milvusdb/milvus:v2.0.1
      command: "milvus run proxy"
      env:
        ETCD_ENDPOINTS: "{{ETCD_ENDPOINTS}}"
        MINIO_ADDRESS: "{{MINIO_ADDRESS}}"
        PULSAR_ADDRESS: "{{PULSAR_ADDRESS}}"
        METRICS_PORT: "9098"
      network_mode: "{{nodes_network}}" #使用Host网络，Host定义在Inventory的变量中。如果使用Bridge网络则需要Publish相关的端口
